// src/context/AuthContext.js - Versi√≥n optimizada sin loops
import React, { createContext, useState, useContext, useEffect, useRef } from 'react';
import authService from '../api/authService';

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [tokenChecked, setTokenChecked] = useState(false);
  
  // Refs para evitar verificaciones m√∫ltiples
  const isInitializing = useRef(false);
  const hasInitialized = useRef(false);

  useEffect(() => {
    // Evitar m√∫ltiples inicializaciones
    if (isInitializing.current || hasInitialized.current) {
      console.log('üîÑ AuthContext: Inicializaci√≥n ya en progreso o completada');
      return;
    }

    const checkLoggedIn = async () => {
      console.log('üöÄ AuthContext: Iniciando verificaci√≥n de autenticaci√≥n...');
      isInitializing.current = true;
      setLoading(true);
      
      try {
        const storedUser = authService.getCurrentUser();
        
        if (storedUser && authService.isAuthenticated()) {
          console.log('üë§ Usuario encontrado en localStorage, verificando token...');
          
          try {
            // Verificar token con el servidor - SOLO UNA VEZ
            const updatedUser = await authService.getProfile();
            setUser(updatedUser);
            setTokenChecked(true);
            console.log('‚úÖ Token v√°lido, usuario autenticado:', updatedUser.email || updatedUser.nombre);
          } catch (err) {
            console.warn('‚ö†Ô∏è Token inv√°lido, cerrando sesi√≥n autom√°ticamente');
            authService.logout();
            setUser(null);
            setTokenChecked(true);
          }
        } else {
          console.log('üëª No hay usuario almacenado o token');
          setUser(null);
          setTokenChecked(true);
        }
      } catch (err) {
        console.error('‚ùå Error checking authentication:', err);
        setError(err);
        setTokenChecked(true);
      } finally {
        setLoading(false);
        isInitializing.current = false;
        hasInitialized.current = true;
        console.log('üèÅ AuthContext: Inicializaci√≥n completada');
      }
    };

    checkLoggedIn();
  }, []); // Sin dependencias para ejecutar solo una vez

  // Iniciar sesi√≥n
  const login = async (email, password) => {
    setError(null);
    setLoading(true);
    try {
      console.log(`üîê Iniciando sesi√≥n para: ${email}`);
      const loggedUser = await authService.login(email, password);
      setUser(loggedUser);
      setTokenChecked(true);
      console.log('‚úÖ Login exitoso');
      return loggedUser;
    } catch (err) {
      console.error('‚ùå Error en login:', err);
      setError(err.response?.data?.error || 'Error al iniciar sesi√≥n');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Registrar usuario
  const register = async (userData) => {
    setError(null);
    setLoading(true);
    try {
      console.log(`üìù Registrando usuario: ${userData.email}`);
      const result = await authService.register(userData);
      console.log('‚úÖ Registro exitoso');
      return result;
    } catch (err) {
      console.error('‚ùå Error en registro:', err);
      setError(err.response?.data?.error || 'Error al registrarse');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Cerrar sesi√≥n
  const logout = () => {
    console.log('üö™ Cerrando sesi√≥n...');
    authService.logout();
    setUser(null);
    setTokenChecked(true);
    // Reset flags para permitir nueva inicializaci√≥n si es necesario
    hasInitialized.current = false;
    isInitializing.current = false;
  };

  // Actualizar perfil
  const updateProfile = async (profileData) => {
    setError(null);
    setLoading(true);
    try {
      console.log('üë§ Actualizando perfil...');
      const updatedUser = await authService.updateProfile(profileData);
      setUser(updatedUser);
      console.log('‚úÖ Perfil actualizado');
      return updatedUser;
    } catch (err) {
      console.error('‚ùå Error actualizando perfil:', err);
      setError(err.response?.data?.error || 'Error al actualizar perfil');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Verificar si el usuario es administrador
  const isAdmin = () => {
    // Verificar diferentes campos de rol que podr√≠as tener
    return user && (user.role === 'admin' || user.rol === 'admin');
  };

  // Solicitar recuperaci√≥n de contrase√±a
  const forgotPassword = async (email) => {
    setError(null);
    setLoading(true);
    try {
      console.log(`üîë Solicitando recuperaci√≥n de contrase√±a para: ${email}`);
      const result = await authService.forgotPassword(email);
      console.log('‚úÖ Solicitud de recuperaci√≥n enviada');
      return result;
    } catch (err) {
      console.error('‚ùå Error en forgot password:', err);
      if (err.response && err.response.status !== 200) {
        setError(err.response?.data?.error || 'Error al procesar la solicitud');
      }
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Validar token de recuperaci√≥n
  const validateResetToken = async (token) => {
    setError(null);
    setLoading(true);
    try {
      console.log(`üîç Validando token de recuperaci√≥n...`);
      const result = await authService.validateResetToken(token);
      console.log('‚úÖ Token de recuperaci√≥n v√°lido');
      return result;
    } catch (err) {
      console.error('‚ùå Error validando token de recuperaci√≥n:', err);
      setError('El enlace para restablecer la contrase√±a es inv√°lido o ha expirado');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Restablecer contrase√±a
  const resetPassword = async (token, password) => {
    setError(null);
    setLoading(true);
    try {
      console.log(`üîÑ Restableciendo contrase√±a...`);
      const result = await authService.resetPassword(token, password);
      console.log('‚úÖ Contrase√±a restablecida exitosamente');
      return result;
    } catch (err) {
      console.error('‚ùå Error restableciendo contrase√±a:', err);
      setError(err.response?.data?.error || 'Error al restablecer la contrase√±a');
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Verificar la validez del token manualmente - OPTIMIZADO
  const verifyToken = async () => {
    // Evitar verificaciones m√∫ltiples
    if (!authService.isAuthenticated() || isInitializing.current) {
      return false;
    }
    
    try {
      console.log('üîç Verificando validez del token...');
      await authService.getProfile();
      console.log('‚úÖ Token v√°lido');
      return true;
    } catch (err) {
      console.warn('‚ö†Ô∏è Token verification failed, logging out');
      authService.logout();
      setUser(null);
      setTokenChecked(true);
      return false;
    }
  };

  const value = {
    user,
    loading,
    error,
    tokenChecked,
    login,
    register,
    logout,
    updateProfile,
    isAdmin,
    forgotPassword,     
    validateResetToken, 
    resetPassword,      
    verifyToken,        
    setError           
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};